#!/usr/bin/python3
#!python3
#!/usr/bin/env

import platform
import os
import getpass
import sys
import shutil

curr_dir = os.getcwd().split('/')
argument = sys.argv[0].split('/')[:-1]
if len(argument) > 0 and argument[-1] == '.':
    argument = argument[:-1]
INSTALLATION_DIR = '/'.join(curr_dir+argument)

USER_NAME = getpass.getuser()
print(USER_NAME)
LINUX_APP_PATH = f"/home/{USER_NAME}"
APP_DIR_NAME = '.acc'
PLATFORM = platform.system()
ISSUES_LINK = 'https://github.com/Bipul-Harsh/auto-cpp-compiler/issues'

class installing_process():
    def __init__(self):
        self.get_app_path()
    
    def get_app_path(self):
        if PLATFORM == 'Linux':
            self.app_path = f'{LINUX_APP_PATH}/{APP_DIR_NAME}'
        elif PLATFORM == 'Mac':
            # self.app_path = f'{MAC_APP_PATH}/{APP_DIR_NAME}'
            print(f"Currently this application cannot be installed in your system.\nBut dont worry it will be supported soon on your request on:\n{ISSUES_LINK}")
        elif PLATFORM == 'Windows':
            # self.app_path = f'{WINDOWS_APP_PATH}/{APP_DIR_NAME}'
            print(f"Currently this application cannot be installed in your system.\nBut dont worry it will be supported soon on your request on:\n{ISSUES_LINK}")
        else:
            print(f'This software doesnt support this system yet :(\nPlease let us know your system to extend our application compatibility with it.\n\nYou can tell this issue at:\n{ISSUES_LINK}')
            exit(1)
        print(self.app_path)

    def create_app_dir(self):
        '''
        Makes a forced installation if already installed. All previous setitings will be lost!!
        '''
        if os.path.isdir(self.app_path):
            shutil.rmtree(self.app_path)
        os.mkdir(self.app_path)
    
    def create_symlink(self):
        '''For linux only'''
        symlink_path = "/usr/local/bin/acc"
        file_path = self.app_path+'/acc'
        print(symlink_path, file_path)
        if os.path.exists(symlink_path):
            print('syslink exists')
            os.system(f'sudo rm {symlink_path}')
        os.system(f'sudo ln -s {file_path} {symlink_path}')
    
    def get_files(self, file_path):
        '''
        Return given file content as a string.
        Will be used by `self.put_files()` to access file content in string
        '''
        assert os.path.exists(file_path),f"{file_path.split('/')[-1]} not found in downloaded directory"
        with open(file_path, 'r') as f:
            file_content = f.read()
        return file_content

    def put_files(self, file):
        '''
        Return given file content as a string.
        '''
        source = f'{INSTALLATION_DIR}/{file}'
        destination = f'{self.app_path}/{file}'
        file_content = self.get_files(source)
        with open(destination, 'w') as f:
            f.write(file_content)
        self.make_executable(file)
    
    def create_file(self, file):
        with open(f'{self.app_path}/{file}', 'w') as f:
            pass
        self.make_executable(file)
    
    def make_executable(self, file):
        if PLATFORM == 'Linux':
            os.system(f'sudo chmod 777 {self.app_path}/{file}')
        elif PLATFORM == "Windows":
            print("To Cover")
        else:
            print("Not know how to do")
    
    def do_installation(self):
        print(f"System : {PLATFORM} {platform.release()}")
        self.create_app_dir()
        self.put_files('main.py')
        self.put_files('operations.py')
        self.put_files('template.cpp')
        self.create_file('.editor')
        self.put_files('acc')
        if PLATFORM == 'Linux':
            self.create_symlink()
            

if __name__ == '__main__':
    installation = installing_process()
    installation.do_installation()